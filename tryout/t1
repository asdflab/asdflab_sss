#!/opt/miniconda3/envs/default-36/bin/python


from bisect import bisect
import pprint


def GenCA():
    for X in [
        { 'idx': 1, 'name':'111', 'xyz':'xyz', },
        { 'idx': 2, 'name':'222', 'xyz':'xyz', },
        { 'idx': 3, 'name':'333', 'xyz':'xyz', },
        { 'idx': 4, 'name':'444', 'xyz':'xyz', },
        { 'idx': 5, 'name':'555', 'xyz':'xyz', },
        ]:
        yield X


def GenCD():
    for X in [
        { 'id': '1', 'name':'111', },
        { 'id': '3', 'name':'333', },
        { 'id': '6', 'name':'666', },
        ]:
        yield X


def GenR():
    for X in [
        { 'idx': 1, 'name':'111', 'xyz':'xyz', },
        { 'idx': 2, 'name':'222', 'xyz':'xyz', },
        { 'idx': 3, 'name':'333', 'xyz':'xyz', },
        { 'idx': 5, 'name':'555', 'xyz':'xyz', },
        { 'idx': 7, 'name':'777', 'xyz':'xyz', },
        ]:
        yield X



def CompareItems(A,B):
    if type(A) != type(B):
        raise ValueError("Cannot compare unequal types: A={} B={}".format(type(A), type(B)))

    if isinstance(A,list):
        lenB= len(B)
        for index,item in enumerate(A):
            if index>=lenB: return 1
            R= CompareItems(item,B[index])
            if R!=0: return R
        if len(A)<lenB: return -1
        return 0

    if isinstance(A,str):
        A= unicodedata.normalize('NFKD',A.casefold())
        B= unicodedata.normalize('NFKD',B.casefold())
        if A<B: return -1
        if A>B: return 1
        return 0

    if A<B: return -1
    if A>B: return 1
    return 0

    raise ValueError("Dont know how to compare items of type {}".format(type(A)))




def SortArray_MergeSort(Array, CompareFunc):

    if len(Array)<=1: return

    mid = len(Array)//2
    lefthalf = Array[:mid]
    righthalf = Array[mid:]

    SortArray_MergeSort(lefthalf, CompareFunc)
    SortArray_MergeSort(righthalf, CompareFunc)

    i=0
    j=0
    k=0
    while i < len(lefthalf) and j < len(righthalf):
        if CompareFunc(lefthalf[i],righthalf[j]) == -1:
            Array[k]=lefthalf[i]
            i=i+1
        else:
            Array[k]=righthalf[j]
            j=j+1
        k=k+1

    while i < len(lefthalf):
        Array[k]=lefthalf[i]
        i=i+1
        k=k+1

    while j < len(righthalf):
        Array[k]=righthalf[j]
        j=j+1
        k=k+1










#def FindLeast(ValueList, FuncList):
##
#    def _FindLeast_Compare():
#        pass
#
#
#
#    SortArray_MergeSort(ValueList, _FindLeast_Compare
#
#    for idx, item in enumerate(ValueList):
#        print("{}: {}".format(idx, FuncList[idx](ValueList[idx])))

    




GCA= GenCA()
GCD= GenCD()
GR= GenR()

XCA= next(GCA, None)
XCD= next(GCD, None)
XR= next(GR, None)

def _compare(A,B):
    #return CompareItems(A,B)
    return CompareItems(A[1:]+[A[0]],B[1:]+[B[0]])


while True:
    print(">>Loop begin")
    if XCA==None and XCD==None and XR==None: break

    print(">>Build and sort list")
    ValueList= [
        [1, int(XCA['idx']), 0],
        [2, int(XCD['id']),  0],
        [3, int(XR['idx']),  0],
    ]
    SortArray_MergeSort(ValueList, _compare)
    pprint.pprint(ValueList)

    for i,v in enumerate(ValueList):
        print("{}: {} {}".format(i,type(v),v))
        print(type(v[1:]))


    print(">>Find least")
    i= next(i for i,v in enumerate(ValueList) if CompareItems(ValueList[1:], [v[1:]])==0)
    print(i)
    

    break



